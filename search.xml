<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/04/09/hello-world/"/>
      <url>/2025/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" />---title: Hello Worldcategories: testswiper_index: 1cover: https://gitee.com/jiyuesgit/img/blob/master/AnimeBG/2a5beaa0e521a24330d375146c3ee55c.jpeg---Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2025/01/22/git/"/>
      <url>/2025/01/22/git/</url>
      
        <content type="html"><![CDATA[<h1 id="windows安装git【通用】"><a href="#windows安装git【通用】" class="headerlink" title="windows安装git【通用】"></a>windows安装git【通用】</h1><blockquote><p>学习笔记，未得到作者允许，不要随意转载！！！！！！！</p><p>注： 很多人都听过 gayhub， 但是不知道怎么去用。安装git 是第一步，虽然很简单直接无线next，但是也会有人好奇其他选项有什么作用，这里给大家一个详细的解释。我很懒，肯定会有疏忽的地方，大家见谅。</p><p>但是看完文章应该可以让你的next不在模糊，心里有一些清晰的认识。</p></blockquote><h2 id="一-简单了解"><a href="#一-简单了解" class="headerlink" title="一 . 简单了解"></a>一 . 简单了解</h2><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git?"></a>什么是 Git?</h3><p><strong>Git</strong> 是一个分布式版本控制系统，用于跟踪文件的更改，特别是在软件开发过程中。它由 <strong>Linus Torvalds</strong> 开发，用于管理 Linux 内核开发。Git 的核心功能是帮助团队和个人管理项目的代码历史、分支、合并和协作。</p><hr><h3 id="Git-的作用"><a href="#Git-的作用" class="headerlink" title="Git 的作用"></a>Git 的作用</h3><ol><li><strong>版本控制</strong>：记录文件的更改历史，可以随时回滚到以前的版本。</li><li><strong>分支管理</strong>：支持多分支开发，便于不同功能模块并行开发。</li><li><strong>团队协作</strong>：通过分布式的方式，开发者可以独立工作并合并代码。</li><li><strong>代码备份</strong>：本地和远程仓库可以同步，避免数据丢失。</li><li><strong>合并与冲突解决</strong>：提供工具帮助解决代码冲突。</li></ol><hr><h3 id="Git-和-GitHub-的区别和联系"><a href="#Git-和-GitHub-的区别和联系" class="headerlink" title="Git 和 GitHub 的区别和联系"></a>Git 和 GitHub 的区别和联系</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a><strong>区别</strong></h4><table><thead><tr><th><strong>特性</strong></th><th><strong>Git</strong></th><th><strong>GitHub</strong></th></tr></thead><tbody><tr><td><strong>性质</strong></td><td>分布式版本控制系统</td><td>基于 Git 的远程代码托管平台</td></tr><tr><td><strong>存储方式</strong></td><td>本地和自建远程仓库</td><td>托管在 GitHub 的远程仓库</td></tr><tr><td><strong>安装需求</strong></td><td>需要安装 Git 客户端</td><td>通过 Web 浏览器或 Git 客户端访问</td></tr><tr><td><strong>功能范围</strong></td><td>专注于代码版本管理</td><td>提供协作工具（如 Pull Request、Issue、Actions 等）</td></tr><tr><td><strong>是否独立</strong></td><td>是独立的软件</td><td>需要依赖 Git 来实现版本控制</td></tr></tbody></table><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a><strong>联系</strong></h4><ol><li><strong>核心技术</strong>：GitHub 使用 Git 作为核心版本控制技术。</li><li><strong>交互方式</strong>：开发者通过 Git 推送（push）、拉取（pull）或克隆（clone）操作与 GitHub 的远程仓库进行交互。</li><li><strong>生态支持</strong>：GitHub 增强了 Git 的功能，提供了基于 Web 的协作工具、代码审查和 CI&#x2F;CD 工作流支持。</li></ol><hr><h3 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h3><ul><li><strong>Git</strong> 是一个工具，用于本地版本控制和管理代码历史。</li><li><strong>GitHub</strong> 是一个服务平台，利用 Git 技术为开发者提供了远程协作和代码托管的能力。</li><li>两者结合后，可以更好地管理代码开发的整个生命周期，从个人开发到团队协作，再到生产环境的部署。</li></ul><h2 id="二-安装步骤"><a href="#二-安装步骤" class="headerlink" title="二 . 安装步骤"></a>二 . 安装步骤</h2><h3 id="步骤-1：下载-Git-安装程序"><a href="#步骤-1：下载-Git-安装程序" class="headerlink" title="步骤 1：下载 Git 安装程序"></a><strong>步骤 1：下载 Git 安装程序</strong></h3><h4 id="1-打开浏览器，访问-Git-官方下载页面"><a href="#1-打开浏览器，访问-Git-官方下载页面" class="headerlink" title="1. 打开浏览器，访问 Git 官方下载页面."></a>1. 打开浏览器，访问 <a href="https://git-scm.com/">Git 官方下载页面</a>.</h4><blockquote><p><a href="https://git-scm.com/">Git</a></p></blockquote><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102020249545.png"></p><h4 id="2-点击-Windows-版本的下载链接，获取最新的-Git-安装程序（通常是一个-exe-文件）。-是什么设备就选什么。"><a href="#2-点击-Windows-版本的下载链接，获取最新的-Git-安装程序（通常是一个-exe-文件）。-是什么设备就选什么。" class="headerlink" title="2. 点击 Windows 版本的下载链接，获取最新的 Git 安装程序（通常是一个 .exe 文件）。 是什么设备就选什么。"></a>2. 点击 <strong>Windows</strong> 版本的下载链接，获取最新的 Git 安装程序（通常是一个 <code>.exe</code> 文件）。 是什么设备就选什么。</h4><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102020359653.png" alt="image-20250102020359653"></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102020601896.png" alt="image-20250102020601896"></p><h4 id="3-然后进入安装-，就是一直next"><a href="#3-然后进入安装-，就是一直next" class="headerlink" title="3. 然后进入安装 ，就是一直next"></a>3. 然后进入安装 ，就是一直next</h4><h5 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102020801373.png" alt="image-20250102020801373"></p><h5 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102020749035.png" alt="image-20250102020749035"></p><h5 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h5><p><strong>这里很多选项 给大家翻译一下 一般 直接next 就可以了</strong></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102020954293.png" alt="image-20250102020954293"></p><blockquote><p><strong>Select Components（选择组件）</strong><br><strong>Which components should be installed?（安装哪些组件？）</strong></p><ul><li><strong>On the Desktop</strong><blockquote><ul><li>在桌面创建快捷方式</li><li><strong>Windows Explorer integration</strong><ul><li>Windows 文件资源管理器集成<br>&gt;     - Open Git Bash here<br>        &gt;       - 在此处打开 Git Bash</li></ul></li></ul></blockquote></li></ul><pre><code>- Open Git GUI here</code></pre></blockquote><pre><code>    &gt;       - 在此处打开 Git GUI</code></pre><blockquote><ul><li><strong>Git LFS (Large File Support)</strong><blockquote><ul><li>Git LFS（大文件支持）</li><li><strong>Associate <code>.git\*</code> configuration files with the default text editor</strong><ul><li>将 <code>.git*</code> 配置文件与默认文本编辑器关联</li></ul></li><li><strong>Associate <code>.sh</code> files to be run with Bash</strong><ul><li>将 <code>.sh</code> 文件与 Bash 关联运行</li></ul></li><li><strong>Check daily for Git for Windows updates</strong><ul><li>每天检查 Git for Windows 更新</li></ul></li><li><strong>(NEW!) Add a Git Bash Profile to Windows Terminal</strong><ul><li>（新功能！）为 Windows Terminal 添加 Git Bash 配置</li></ul></li><li><strong>(NEW!) Scalar (Git add-on to manage large-scale repositories)</strong><ul><li>（新功能！）Scalar（用于管理大规模代码库的 Git 插件）</li></ul></li></ul></blockquote></li></ul></blockquote><h5 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102021314446.png" alt="image-20250102021314446"></p><h5 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102021336045.png" alt="image-20250102021336045"></p><h5 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h5><blockquote><p>这里就是创建仓库 默认 为master 分支 也可以选下面自定义</p></blockquote><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102021344862.png" alt="image-20250102021344862"></p><h5 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a>3.7</h5><p><strong>这里很多人也不知道选那个，三个有什么区别，这里简单介绍一下，一般就默认的第二个 next。</strong></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102021617992.png" alt="image-20250102021617992"></p><blockquote><h3 id="Adjusting-your-PATH-environment"><a href="#Adjusting-your-PATH-environment" class="headerlink" title="Adjusting your PATH environment"></a><strong>Adjusting your PATH environment</strong></h3><p><strong>(如何配置 Git 的 PATH 环境变量)</strong></p><hr><h3 id="选项-1：Use-Git-from-Git-Bash-only"><a href="#选项-1：Use-Git-from-Git-Bash-only" class="headerlink" title="选项 1：Use Git from Git Bash only"></a><strong>选项 1：Use Git from Git Bash only</strong></h3><p><strong>（仅从 Git Bash 使用 Git）</strong></p><ul><li><strong>描述</strong>：<blockquote><p>  选择此选项时，Git 的可执行文件不会添加到系统的 PATH 环境变量中。<br>  你只能通过 <strong>Git Bash</strong> 使用 Git，而无法在其他终端（如命令提示符、PowerShell）中使用 Git。</p><ul><li><strong>优点</strong>：<ul><li>环境变量不被修改，避免潜在的系统工具冲突。</li></ul></li><li><strong>适用场景</strong>：<ul><li>用户只计划在 <strong>Git Bash</strong> 中使用 Git，不需要在其他终端中使用。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-2：Git-from-the-command-line-and-also-from-3rd-party-software"><a href="#选项-2：Git-from-the-command-line-and-also-from-3rd-party-software" class="headerlink" title="选项 2：Git from the command line and also from 3rd-party software"></a><strong>选项 2：Git from the command line and also from 3rd-party software</strong></h3><p><strong>（从命令行以及第三方软件使用 Git）——</strong> 推荐选项</p><ul><li><strong>描述</strong>：<blockquote><p>  Git 的核心功能会被添加到 PATH 环境变量中，同时不会添加额外的 Unix 工具（如 <code>find</code> 和 <code>sort</code>）。<br>  你可以在以下环境中使用 Git：</p><ul><li><strong>Git Bash</strong></li><li><strong>Windows 命令提示符 (cmd)</strong></li><li><strong>PowerShell</strong></li><li>其他第三方工具或 IDE（如 Visual Studio、VS Code）。</li><li><strong>优点</strong>：<ul><li>提供了更大的灵活性，允许在各种终端和工具中使用 Git。</li><li>适合大多数用户。</li></ul></li><li><strong>适用场景</strong>：<ul><li>用户希望使用 Git 的多平台功能，例如在 IDE 或命令提示符中直接运行 Git 命令。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-3：Use-Git-and-optional-Unix-tools-from-the-Command-Prompt"><a href="#选项-3：Use-Git-and-optional-Unix-tools-from-the-Command-Prompt" class="headerlink" title="选项 3：Use Git and optional Unix tools from the Command Prompt"></a><strong>选项 3：Use Git and optional Unix tools from the Command Prompt</strong></h3><p><strong>（在命令提示符中使用 Git 和可选的 Unix 工具）</strong></p><ul><li><strong>描述</strong>：<blockquote><p>  此选项会将 Git 和额外的 Unix 工具（如 <code>find</code> 和 <code>sort</code>）添加到 PATH 中。<br>  这些工具可能会覆盖 Windows 系统自带的同名工具，导致冲突或意外行为。</p><ul><li><strong>优点</strong>：<ul><li>允许在命令提示符和其他工具中使用 Git 和 Unix 工具。</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>风险</strong>：覆盖系统工具（如 Windows 的 <code>find</code> 和 <code>sort</code>），可能引发不可预料的问题。</li><li><strong>不适合新手用户</strong>，需要理解相关风险。</li></ul></li><li><strong>适用场景</strong>：<ul><li>用户熟悉 Unix 工具，并希望在 Windows 环境中使用它们（同时愿意承担覆盖系统工具的风险）。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="推荐选择"><a href="#推荐选择" class="headerlink" title="推荐选择"></a><strong>推荐选择</strong></h3><ul><li><strong>大多数用户</strong>：选择 <strong>第二个选项</strong>（Git from the command line and also from 3rd-party software）。</li><li><strong>仅在 Git Bash 使用的用户</strong>：选择 <strong>第一个选项</strong>。</li><li><strong>高级用户，需使用 Unix 工具</strong>：选择 <strong>第三个选项</strong>（需了解风险）。</li></ul></blockquote><h5 id="3-8"><a href="#3-8" class="headerlink" title="3.8"></a>3.8</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102021912670.png" alt="image-20250102021912670"></p><blockquote><h3 id="Choosing-the-SSH-executable"><a href="#Choosing-the-SSH-executable" class="headerlink" title="Choosing the SSH executable"></a><strong>Choosing the SSH executable</strong></h3><p><strong>（选择要使用的 SSH 客户端程序）</strong></p><p>Git 需要使用 SSH（Secure Shell）来与远程仓库进行安全通信，比如通过 SSH 协议连接 GitHub、GitLab 或其他代码托管平台。你可以选择以下两种方式来配置 SSH 客户端。</p><hr><h3 id="选项-1：Use-bundled-OpenSSH"><a href="#选项-1：Use-bundled-OpenSSH" class="headerlink" title="选项 1：Use bundled OpenSSH"></a><strong>选项 1：Use bundled OpenSSH</strong></h3><p><strong>（使用 Git 自带的 OpenSSH）</strong></p><ul><li><strong>描述</strong>：<blockquote><p>  Git 将使用自带的 <code>ssh.exe</code>，这是一个 OpenSSH 客户端。它和 Git 一起安装，无需额外配置。</p><ul><li><strong>优点</strong>：<ul><li>简单方便，开箱即用，无需额外安装或配置 SSH。</li><li>适用于大多数用户，尤其是新手。</li></ul></li><li><strong>适用场景</strong>：<ul><li>用户没有其他特殊需求，只需要一个默认的 SSH 客户端与远程仓库交互。</li><li>推荐大多数用户选择此选项。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-2：Use-external-OpenSSH"><a href="#选项-2：Use-external-OpenSSH" class="headerlink" title="选项 2：Use external OpenSSH"></a><strong>选项 2：Use external OpenSSH</strong></h3><p><strong>（使用外部 OpenSSH 客户端）</strong></p><ul><li><strong>描述</strong>：<blockquote><p>  Git 将使用系统中已经安装的 OpenSSH 客户端（如 Windows 内置的 OpenSSH 或其他自定义安装的版本）。<br>  Git 不会自带 OpenSSH，而是依赖 PATH 环境变量中可用的 <code>ssh.exe</code>。</p><ul><li><strong>优点</strong>：<ul><li>如果用户已经配置了自定义的 SSH 客户端，或者使用了 Windows 的内置 OpenSSH，可以选择这个选项。</li><li>更适合高级用户和需要特定 SSH 配置的场景。</li></ul></li><li><strong>缺点</strong>：<ul><li>需要确保系统中已安装 OpenSSH 并正确配置 PATH，否则可能会导致连接问题。</li><li>对新手用户不够友好，可能需要额外的手动配置。</li></ul></li><li><strong>适用场景</strong>：<ul><li>用户已经熟悉 SSH 配置，并且需要使用特定版本或自定义配置的 OpenSSH 客户端。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="推荐选择-1"><a href="#推荐选择-1" class="headerlink" title="推荐选择"></a><strong>推荐选择</strong></h3><ul><li><strong>大多数用户</strong>：选择 <strong>Use bundled OpenSSH</strong>，因为它开箱即用，配置简单。</li><li><strong>高级用户</strong>：选择 <strong>Use external OpenSSH</strong>，如果你需要使用系统中已有的 SSH 客户端或有特殊需求。</li></ul></blockquote><h5 id="3-9"><a href="#3-9" class="headerlink" title="3.9"></a>3.9</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102022229855.png" alt="image-20250102022229855"></p><blockquote><h3 id="选项-1：Checkout-Windows-style-commit-Unix-style-line-endings"><a href="#选项-1：Checkout-Windows-style-commit-Unix-style-line-endings" class="headerlink" title="选项 1：Checkout Windows-style, commit Unix-style line endings"></a><strong>选项 1：Checkout Windows-style, commit Unix-style line endings</strong></h3><p><strong>（检出时使用 Windows 换行符，提交时使用 Unix 换行符）</strong> —— <strong>推荐选项</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>在检出文件到本地时，将 Unix 的 LF 转换为 Windows 的 CRLF（方便 Windows 用户阅读和编辑）。</li><li>在提交文件到版本库时，将 Windows 的 CRLF 转换回 Unix 的 LF（确保版本库内的文件使用标准的 LF 格式）。</li><li><strong>适用场景</strong>：<ul><li>跨平台开发（例如项目成员使用不同的操作系统）。</li><li>避免因换行符不同导致代码库中产生不必要的文件差异。</li></ul></li><li><strong>推荐使用</strong>：<ul><li><strong>大多数 Windows 用户</strong>，尤其是参与跨平台协作的项目。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-2：Checkout-as-is-commit-Unix-style-line-endings"><a href="#选项-2：Checkout-as-is-commit-Unix-style-line-endings" class="headerlink" title="选项 2：Checkout as-is, commit Unix-style line endings"></a><strong>选项 2：Checkout as-is, commit Unix-style line endings</strong></h3><p><strong>（检出时保留原样，提交时使用 Unix 换行符）</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>检出文件到本地时不进行任何转换（保持文件的原始换行符格式）。</li><li>提交文件到版本库时，统一将换行符转换为 Unix 的 LF 格式。</li><li><strong>适用场景</strong>：<ul><li>Windows 用户希望在本地保留文件的原始格式，而不进行转换。</li><li>跨平台项目中希望强制统一版本库内的 LF 格式。</li></ul></li><li><strong>推荐使用</strong>：<ul><li><strong>高级用户</strong>，或对文件换行符格式有特殊要求的开发者。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-3：Checkout-as-is-commit-as-is"><a href="#选项-3：Checkout-as-is-commit-as-is" class="headerlink" title="选项 3：Checkout as-is, commit as-is"></a><strong>选项 3：Checkout as-is, commit as-is</strong></h3><p><strong>（检出和提交时均保留原样）</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>无论检出还是提交，Git 都不会对换行符进行任何转换。文件的换行符格式完全由开发者和编辑器控制。</li><li><strong>适用场景</strong>：<ul><li>所有开发者使用同一操作系统（如全是 Windows 或全是 Linux）。</li><li>不需要跨平台协作，或项目本身对换行符没有要求。</li></ul></li><li><strong>注意</strong>：<ul><li>不推荐用于跨平台项目，因为可能导致换行符不一致，从而产生问题（如编译错误或版本差异）。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="推荐选择-2"><a href="#推荐选择-2" class="headerlink" title="推荐选择"></a><strong>推荐选择</strong></h3><ul><li><strong>大多数用户</strong>：选择 <strong>第一个选项</strong>（Checkout Windows-style, commit Unix-style line endings），尤其是跨平台协作的场景。</li><li><strong>全 Windows 项目</strong>：可以选择 <strong>第三个选项</strong>（Checkout as-is, commit as-is）。</li><li><strong>对换行符有特殊需求的用户</strong>：可以选择 <strong>第二个选项</strong>。</li></ul></blockquote><h5 id="3-10"><a href="#3-10" class="headerlink" title="3.10"></a>3.10</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102022835264.png" alt="image-20250102022835264"></p><blockquote><p>以下是 <strong>“Configuring the terminal emulator to use with Git Bash”</strong> 两个选项的区别和解释：</p><hr><h3 id="Configuring-the-terminal-emulator-to-use-with-Git-Bash"><a href="#Configuring-the-terminal-emulator-to-use-with-Git-Bash" class="headerlink" title="Configuring the terminal emulator to use with Git Bash"></a><strong>Configuring the terminal emulator to use with Git Bash</strong></h3><p><strong>（配置 Git Bash 使用的终端模拟器）</strong></p><p>Git Bash 可以使用不同的终端模拟器，你需要选择一个适合的终端环境。</p><hr><h3 id="选项-1：Use-MinTTY-the-default-terminal-of-MSYS2"><a href="#选项-1：Use-MinTTY-the-default-terminal-of-MSYS2" class="headerlink" title="选项 1：Use MinTTY (the default terminal of MSYS2)"></a><strong>选项 1：Use MinTTY (the default terminal of MSYS2)</strong></h3><p><strong>（使用 MinTTY 模拟器，MSYS2 的默认终端）</strong> —— <strong>推荐选项</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>MinTTY 是 Git Bash 默认的终端模拟器，提供了以下功能：<br>&gt;     - 可调整大小的窗口。</li></ul></blockquote></li></ul><pre><code>- 支持非矩形选择。- Unicode 字体支持（可以正确显示非 ASCII 字符）。</code></pre><ul><li>注意：某些 Windows 控制台程序（如交互式 Python 程序）需要通过 <code>winpty</code> 启动才能在 MinTTY 上运行。</li><li><strong>优点</strong>：<blockquote><ul><li>更现代化的终端界面。</li><li>支持更多功能，例如更好的字体显示和窗口调整。</li><li>界面美观，用户体验更好。</li><li><strong>缺点</strong>：<ul><li>某些需要 Windows 控制台的程序（如某些旧的交互式命令行工具）可能需要额外配置才能运行。</li></ul></li><li><strong>适用场景</strong>：<ul><li>推荐大多数用户选择此选项，尤其是对终端界面有较高要求的用户。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-2：Use-Windows’-default-console-window"><a href="#选项-2：Use-Windows’-default-console-window" class="headerlink" title="选项 2：Use Windows’ default console window"></a><strong>选项 2：Use Windows’ default console window</strong></h3><p><strong>（使用 Windows 的默认控制台窗口）</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>使用 Windows 自带的控制台窗口（<code>cmd.exe</code>）。</li><li>适用于支持 Win32 控制台的程序（如交互式 Python 或 Node.js）。</li><li>Windows 10 之前的版本，默认窗口无法自由调整大小，只允许矩形文本选择。</li><li><strong>优点</strong>：<ul><li>与传统 Windows 应用程序兼容性更好。</li><li>某些需要特定控制台功能的工具（如旧版程序）可以更好运行。</li></ul></li><li><strong>缺点</strong>：<ul><li>不支持 Unicode 字符的完整显示，可能需要额外配置字体。</li><li>滚动条支持有限，窗口体验不如 MinTTY。</li></ul></li><li><strong>适用场景</strong>：<ul><li>用户更熟悉 Windows 的默认控制台，或需要与特定 Win32 控制台程序兼容。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="推荐选择-3"><a href="#推荐选择-3" class="headerlink" title="推荐选择"></a><strong>推荐选择</strong></h3><ul><li><strong>大多数用户</strong>：选择 <strong>Use MinTTY</strong>，因为它提供了更现代的终端功能，适合绝大多数使用场景。</li><li><strong>需要兼容性或旧版工具支持的用户</strong>：选择 <strong>Use Windows’ default console window</strong>。</li></ul></blockquote><h5 id="3-11"><a href="#3-11" class="headerlink" title="3.11"></a>3.11</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102022931609.png" alt="image-20250102022931609"></p><blockquote><h3 id="选项-1：Fast-forward-or-merge"><a href="#选项-1：Fast-forward-or-merge" class="headerlink" title="选项 1：Fast-forward or merge"></a><strong>选项 1：Fast-forward or merge</strong></h3><p><strong>（快速前进或合并）</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>如果当前分支与远程分支没有分叉（即本地没有额外的提交），Git 会直接执行 <strong>fast-forward</strong> 操作，将本地分支指向远程分支的最新提交。</li><li>如果当前分支与远程分支有分叉，Git 会执行一个 <strong>merge commit</strong>，将远程分支的更改合并到本地分支中。</li><li><strong>优点</strong>：<ul><li>适合大多数场景，既保留了快进（fast-forward）的效率，又在需要时进行合并。</li><li>默认行为，适用于协作开发时的大部分工作流。</li></ul></li><li><strong>缺点</strong>：<ul><li>如果分支有分叉，可能会生成额外的合并提交，导致提交历史不够简洁。</li></ul></li><li><strong>适用场景</strong>：<ul><li>推荐大多数用户选择此选项，特别是团队协作项目。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-2：Rebase"><a href="#选项-2：Rebase" class="headerlink" title="选项 2：Rebase"></a><strong>选项 2：Rebase</strong></h3><p><strong>（变基）</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>如果当前分支与远程分支有分叉，Git 会通过 <strong>rebase</strong> 操作，将本地的提交重新应用到远程分支的最新提交之上。</li><li>如果没有分叉，这相当于 <strong>fast-forward</strong>。</li><li><strong>优点</strong>：<ul><li>提交历史更加简洁，因为所有本地提交都会按顺序排列在远程分支之后。</li><li>避免了额外的合并提交。</li></ul></li><li><strong>缺点</strong>：<ul><li>如果本地分支已经推送到远程仓库，变基会导致提交哈希发生变化，可能需要强制推送（<code>git push --force</code>），这在协作开发中可能引发冲突。</li></ul></li><li><strong>适用场景</strong>：<ul><li>用户希望保持提交历史整洁，并对 Git 操作较为熟悉。</li><li>推荐个人项目或对提交历史有严格要求的开发者。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="选项-3：Only-ever-fast-forward"><a href="#选项-3：Only-ever-fast-forward" class="headerlink" title="选项 3：Only ever fast-forward"></a><strong>选项 3：Only ever fast-forward</strong></h3><p><strong>（仅快速前进）</strong></p><ul><li><strong>描述</strong>：<blockquote><ul><li>Git 只允许 <strong>fast-forward</strong>，即只有当前分支完全滞后于远程分支时才会执行拉取操作。</li><li>如果需要合并（即分支发生分叉），Git 会报错，拉取操作失败。</li><li><strong>优点</strong>：<ul><li>不会生成额外的合并提交，历史保持整洁。</li><li>强制用户在发生分叉时手动处理合并或变基，提供更高的控制力。</li></ul></li><li><strong>缺点</strong>：<ul><li>需要开发者手动处理分叉场景，操作复杂度较高。</li></ul></li><li><strong>适用场景</strong>：<ul><li>适合高级用户，特别是在对代码历史非常严格的团队工作流中。</li></ul></li></ul><hr></blockquote></li></ul><h3 id="推荐选择-4"><a href="#推荐选择-4" class="headerlink" title="推荐选择"></a><strong>推荐选择</strong></h3><ul><li><strong>大多数用户</strong>：选择 <strong>Fast-forward or merge</strong>，因为它既简单又适合协作开发。</li><li><strong>希望保持历史简洁的用户</strong>：选择 <strong>Rebase</strong>，但需了解变基的风险。</li><li><strong>高级用户或对历史严格控制的场景</strong>：选择 <strong>Only ever fast-forward</strong>，以确保提交历史完全整洁。</li></ul></blockquote><h5 id="3-12-后面的全部next-就可以了-我点太快安装好了-直接finsh-就好了。"><a href="#3-12-后面的全部next-就可以了-我点太快安装好了-直接finsh-就好了。" class="headerlink" title="3.12  后面的全部next 就可以了  我点太快安装好了 直接finsh 就好了。"></a>3.12  后面的全部next 就可以了  我点太快安装好了 直接finsh 就好了。</h5><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102023204269.png" alt="image-20250102023204269"></p><h4 id="4-验证安装"><a href="#4-验证安装" class="headerlink" title="4.验证安装"></a>4.验证安装</h4><p>打开 <strong>Git Bash</strong> 或 <strong>命令提示符</strong>。</p><p>输入以下命令查看安装版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>如果显示类似 <code>git version 2.x.x</code>，说明安装成功</p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102023511255.png" alt="image-20250102023511255"></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E5%AE%89%E8%A3%85git/%E5%AE%89%E8%A3%85git.assets/image-20250102023517359.png" alt="image-20250102023517359"></p><hr><h3 id="附加配置（可选）"><a href="#附加配置（可选）" class="headerlink" title="附加配置（可选）"></a><strong>附加配置（可选）</strong></h3><h4 id="设置用户名和邮箱（提交代码必需）"><a href="#设置用户名和邮箱（提交代码必需）" class="headerlink" title="设置用户名和邮箱（提交代码必需）"></a>设置用户名和邮箱（提交代码必需）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your.email@example.com&quot;</span></span><br></pre></td></tr></table></figure><h4 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h4 id="测试-GitHub-连接"><a href="#测试-GitHub-连接" class="headerlink" title="测试 GitHub 连接"></a>测试 GitHub 连接</h4><p>如果使用 GitHub，可以通过以下命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是第一次连接，可能需要生成 SSH 密钥并添加到 GitHub 账户。</p><h3 id="感谢学习-，-希望有帮助到你们！！"><a href="#感谢学习-，-希望有帮助到你们！！" class="headerlink" title="感谢学习 ， 希望有帮助到你们！！"></a>感谢学习 ， 希望有帮助到你们！！</h3>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI视频换脸技术Deep-Live-Cam</title>
      <link href="/2024/09/02/DeepLiveFace/"/>
      <url>/2024/09/02/DeepLiveFace/</url>
      
        <content type="html"><![CDATA[<h1 id="AI视频换脸技术Deep-Live-Cam"><a href="#AI视频换脸技术Deep-Live-Cam" class="headerlink" title="AI视频换脸技术Deep-Live-Cam"></a><strong>AI视频换脸技术Deep-Live-Cam</strong></h1><p><strong>Deep Live Cam 是一个利用深度学习技术实现的实时视频处理工具。它旨在通过先进的机器学习算法，对摄像头或其他视频源的输入进行实时分析和处理，从而实现诸如人脸识别、对象检测、动作识别等多种功能。</strong></p><h3 id="免責聲明"><a href="#免責聲明" class="headerlink" title="免責聲明"></a><strong>免責聲明</strong></h3><p><strong>该软件旨在为快速增长的 AI 生成媒体行业做出富有成效的贡献。它将帮助艺术家完成诸如为自定义角色制作动画或将角色用作服装模型等任务。</strong></p><p><strong>该软件的开发人员意识到其可能的不道德应用程序，并承诺采取预防措施来应对它们。它有一个内置检查，可以防止程序在不适当的媒体上运行，包括但不限于裸体、图形内容、敏感材料，如战争镜头等。我们将继续在遵守法律和道德的同时，朝着积极的方向发展这个项目。如果法律要求，该项目可能会被关闭或在输出中包含水印。</strong></p><p><strong>本软件的用户应负责任地使用本软件，同时遵守当地法律。如果使用真人的面孔，用户需要获得相关人员的同意，并在在线发布内容时明确提及这是深度伪造。本软件的开发人员不对最终用户的行为负责。</strong></p><hr><h3 id="一-简单介绍"><a href="#一-简单介绍" class="headerlink" title="一. 简单介绍"></a><strong>一. 简单介绍</strong></h3><p>​<strong>这是gayhub的一个ai换脸技术 他只要用到简单的python，cpu&#x2F;gpu 就可以实现ai视频人脸转换</strong></p><p>​<strong><a href="https://github.com/hacksider/Deep-Live-Cam">hacksider&#x2F;Deep-Live-Cam：实时换脸和一键式视频深度伪造，只有一张图片 (github.com)</a></strong></p><p><strong><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240902233544838.png" alt="image-20240902233544838" style="zoom:80%;" /></strong></p><h3 id="二-如何使用"><a href="#二-如何使用" class="headerlink" title="二. 如何使用"></a><strong>二. 如何使用</strong></h3><h4 id="1-需要的平台（Setup-your-platform）"><a href="#1-需要的平台（Setup-your-platform）" class="headerlink" title="1. 需要的平台（Setup your platform）"></a><strong>1. 需要的平台（Setup your platform）</strong></h4><ul><li><strong>python (3.10 recommended)</strong></li><li><strong>pip</strong></li><li><strong>git</strong></li><li><strong><a href="https://www.youtube.com/watch?v=OlNWCpFdVMA">ffmpeg</a>【记得下载并加入环境变量 教程 <a href="https://www.cnblogs.com/wwwwariana/p/18191233">【最新】windows电脑FFmpeg安装教程手把手详解 - A-A-A-Ariana - 博客园 (cnblogs.com)</a>】</strong></li><li><strong><a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">visual studio 2022 runtimes (windows)</a>  【这个哪有把】</strong></li></ul><h4 id="2-克隆项目（Clone-Repository）"><a href="#2-克隆项目（Clone-Repository）" class="headerlink" title="2. 克隆项目（Clone Repository）"></a><strong>2. 克隆项目（Clone Repository）</strong></h4><p>​<strong>创建文件夹，然后打开 <code>git bash</code></strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hacksider/Deep-Live-Cam.git</span><br></pre></td></tr></table></figure><p><strong><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240902234404533.png" alt="image-20240902234404533"></strong></p><h4 id="3-下载模型（Download-Models）"><a href="#3-下载模型（Download-Models）" class="headerlink" title="3. 下载模型（Download Models）"></a><strong>3. 下载模型（Download Models）</strong></h4><p>​<strong>将这两个文件夹下载并保存在拉取的 &#x2F;Deep-Live-Cam&#x2F;models  下面</strong></p><ol><li><strong><a href="https://huggingface.co/hacksider/deep-live-cam/resolve/main/GFPGANv1.4.pth">GFPGANv1.4</a></strong></li><li><strong><a href="https://huggingface.co/hacksider/deep-live-cam/resolve/main/inswapper_128_fp16.onnx">inswapper_128_fp16.onnx</a> <em>(Note: Use this <a href="https://github.com/facefusion/facefusion-assets/releases/download/models/inswapper_128_fp16.onnx">replacement version</a> if an issue occurs on your computer)</em></strong></li></ol><p><strong>Then put those 2 files on the “models” folder</strong></p><p><strong><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240902234953130.png" alt="image-20240902234953130"></strong></p><h4 id="4-安装依赖（Install-dependency）"><a href="#4-安装依赖（Install-dependency）" class="headerlink" title="4. 安装依赖（Install dependency）"></a><strong>4. 安装依赖（Install dependency）</strong></h4><p>​<strong>win 就用这个</strong></p><p>*<em>We highly recommend to work with a to avoid issues.<code>venv</code>   <em>（一定要是3.10.x以上，我的原来是3.9.x一直报错坑死我了）</em>【记得留空间这玩意不小】【c盘炸了你敢信，16g缓存放不完，建议c留40g】这个过程非常漫长，然后会缺东西要一个个补，每个人情况可能都不一样</em>*</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>​<strong>如果你是mac 用下面这个</strong></p><p><strong>For MAC OS, You have to install or upgrade python-tk package:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install python-tk@3.10</span><br></pre></td></tr></table></figure><p>​<strong>我用的 pycharm 打开 terminal 应该是在这个目录。</strong></p><p><strong><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240902235746610.png" alt="image-20240902235746610"></strong></p><p><strong><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240903005009121.png" alt="image-20240903005009121"></strong></p><p><strong><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240903005306722.png" alt="image-20240903005306722"></strong></p><h4 id="5-结果"><a href="#5-结果" class="headerlink" title="5. 结果"></a>5. 结果</h4><p><strong>下载完毕，也将上面的平台下载后就可以使用了。因为我的性能太差，一个大黑方块脸，一直加载不好，然后电脑巨卡，紧急删除截图没有了，但是差不多就是那个意思，我没有用gpu家加速，加上的话应该会好很多。</strong></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240904005128196.png" alt="image-20240904005128196"></p><p><strong>Just follow the clicks on the screenshot</strong></p><ol><li><strong>Select a face</strong></li><li><strong>点击live</strong></li><li><strong>等待几秒钟(需要更长的时间，通常是10到30秒，预览才会出现)</strong></li></ol><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/DeepLiveFace%E4%BD%BF%E7%94%A8/DeepLiveFace.assets/image-20240904005135937.png" alt="image-20240904005135937"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自建docker加速镜像源</title>
      <link href="/2024/07/06/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/"/>
      <url>/2024/07/06/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="自建docker加速镜像源"><a href="#自建docker加速镜像源" class="headerlink" title="自建docker加速镜像源"></a>自建docker加速镜像源</h1><hr><blockquote><p>​因为国内docker镜像源就只剩下阿里了，docker_hub已经访问不到了。虽然阿里还在，但是里面很多镜像源都是特别老的。比如bitwarden，还是21年的。现在已经用不了了。所以我们可以自建一个docker镜像。</p><p>​本文章涉及到的应用仅供学习交流使用，不得用于任何商业用途，数据来源于互联网公开内容，没有获取任何私有和有权限的信息（个人信息等）。由此引发的任何法律纠纷与本人无关！未经本人允许，禁止直接转发！</p></blockquote><p><em>参考文章：<a href="https://www.geekxw.top/1467">https://www.geekxw.top/1467</a></em></p><p>[TOC]</p><h3 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一 环境准备"></a>一 环境准备</h3><ul><li>国外的Linux服务器。</li><li>宝塔面板 （其他的也可以）</li><li>nginx</li></ul><h3 id="二-搭建步骤"><a href="#二-搭建步骤" class="headerlink" title="二 搭建步骤"></a>二 搭建步骤</h3><h4 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1 安装nginx"></a>1 安装nginx</h4><p>​打开宝塔面板如下操作。</p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240706115005041.png" alt="image-20240706115005041"></p><h4 id="2-创建网址"><a href="#2-创建网址" class="headerlink" title="2 创建网址"></a>2 创建网址</h4><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240706115708530.png" alt="image-20240706115708530"></p><h4 id="3-配置nginx"><a href="#3-配置nginx" class="headerlink" title="3 配置nginx"></a>3 配置nginx</h4><p>​如图步骤将下面代码复制到配置文件把选中的东西替换掉。</p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240706120443291.png" alt="image-20240706120443291"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">location /v2/ &#123;</span><br><span class="line">    proxy_pass https://registry-1.docker.io;</span><br><span class="line">    proxy_set_header Host registry-1.docker.io;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    proxy_buffering off;</span><br><span class="line">    proxy_request_buffering off;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_read_timeout 7200s;</span><br><span class="line">    proxy_send_timeout 7200s;</span><br><span class="line">    send_timeout 7200s;</span><br><span class="line">    proxy_connect_timeout 7200s;</span><br><span class="line">    proxy_set_header Authorization <span class="variable">$http_authorization</span>;</span><br><span class="line">    proxy_pass_header Authorization;</span><br><span class="line">    proxy_intercept_errors on;</span><br><span class="line">    recursive_error_pages on;</span><br><span class="line">    error_page 301 302 307 = @handle_redirect;</span><br><span class="line">&#125;</span><br><span class="line">location @handle_redirect &#123;</span><br><span class="line">    resolver 1.1.1.1;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$saved_redirect_location</span> <span class="string">&#x27;$upstream_http_location&#x27;</span>;</span><br><span class="line">    proxy_pass <span class="variable">$saved_redirect_location</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-申请ssl证书"><a href="#4-申请ssl证书" class="headerlink" title="4 申请ssl证书"></a>4 申请ssl证书</h4><p>​申请成功后强制https</p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240706120829863.png" alt="image-20240706120829863"></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240707141902504.png" alt="image-20240707141902504"></p><p>然后就完成了！</p><h4 id="5-查看站点"><a href="#5-查看站点" class="headerlink" title="5 查看站点"></a>5 查看站点</h4><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240707145028136.png" alt="image-20240707145028136"></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240707145045771.png" alt="image-20240707145045771"></p><h4 id="6-自定义站点页面"><a href="#6-自定义站点页面" class="headerlink" title="6 自定义站点页面"></a>6 自定义站点页面</h4><p>​在文件这编写<code>index.html</code> 就可以自定义自己的主页</p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90/%E8%87%AA%E5%BB%BAdocker%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F%E6%BA%90.assets/image-20240707145250120.png" alt="image-20240707145250120"></p><h4 id="三-将他配置到我们的docker上。"><a href="#三-将他配置到我们的docker上。" class="headerlink" title="三 将他配置到我们的docker上。"></a>三 将他配置到我们的docker上。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 复制内容，注意把其中的镜像加速地址改成你自己的</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://xxxxdocker.online&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 重新加载配置</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 重启Docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>就可以了</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器搭建BITwarden</title>
      <link href="/2024/06/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/"/>
      <url>/2024/06/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器搭建BITwarden"><a href="#服务器搭建BITwarden" class="headerlink" title="服务器搭建BITwarden"></a>服务器搭建BITwarden</h1><hr><h3 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一. 环境准备"></a>一. 环境准备</h3><ul><li><strong>一个域名</strong>  (DNS解析设置好)</li><li><strong>一个云服务器</strong> （记得开放对应端口）</li><li><strong>宝塔面板</strong></li><li><strong>docker</strong></li></ul><h2 id="二-安装BITwarden"><a href="#二-安装BITwarden" class="headerlink" title="二. 安装BITwarden"></a>二. 安装BITwarden</h2><h4 id="1-添加域名"><a href="#1-添加域名" class="headerlink" title="1. 添加域名"></a>1. 添加域名</h4><p>​点击网站，添加站点。</p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625104431212.png" alt="image-20240625104431212" style="zoom: 80%;" /><p>​</p><p>​申请ssl证书 ，保存就看可以了。记得强制HTTPS请求。</p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625110102893.png" alt="image-20240625110102893" style="zoom: 80%;" /><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625111937290.png" alt="image-20240625111937290" style="zoom:50%;" /><p>​可以加一个流量限制，自己看着来。</p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625111743053.png" alt="image-20240625111743053" style="zoom: 80%;" /><h4 id="2-拉取docker镜像"><a href="#2-拉取docker镜像" class="headerlink" title="2. 拉取docker镜像"></a>2. 拉取docker镜像</h4><p>​docker下载连接不了参考这个<a href="https://blog.csdn.net/qq_25976859/article/details/139978941?spm=1001.2014.3001.5501">解决docker下载不了问题-CSDN博客</a></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625112656045.png" alt="image-20240625112656045"></p><p>​国内拉不了的自己配置阿里云镜像然后直接命令拉取 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull vaultwarden/server</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625114029668.png" alt="image-20240625114029668"></p><h4 id="3-创建容器"><a href="#3-创建容器" class="headerlink" title="3. 创建容器"></a>3. 创建容器</h4><p>​拉取成功后创建容器，填写端口什么的，挂载位置。 （第一个端口是 88 ， 第二个是 80）</p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625115051899.png" alt="image-20240625115051899" style="zoom: 50%;" /><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625115101145.png" alt="image-20240625115101145" style="zoom:67%;" /><p>​这样就算是成功了</p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625115202844.png" alt="image-20240625115202844" style="zoom:67%;" /><h4 id="4-配置网站信息"><a href="#4-配置网站信息" class="headerlink" title="4. 配置网站信息"></a>4. 配置网站信息</h4><p>​回到网页，点击设置 –》 网站目录 –》 然后选择你刚刚的挂载目录就可以了 然后保存。</p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625115422645.png" alt="image-20240625115422645"></p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625115546047.png" alt="image-20240625115546047" style="zoom:67%;" /><h4 id="5-添加反向代理"><a href="#5-添加反向代理" class="headerlink" title="5. 添加反向代理"></a>5. 添加反向代理</h4><p>​目标url端口也填写 88</p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240625120047659.png" alt="image-20240625120047659" style="zoom: 50%;" /><p>保存好反向代理就可以了。</p><h3 id="三-尝试访问"><a href="#三-尝试访问" class="headerlink" title="三. 尝试访问"></a>三. 尝试访问</h3><p>​现在都要备案,在阿里备案应该就可以了。</p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240703030833903.png" alt="image-20240703030833903"></p><p><img src="https://gitee.com/jiyuesgit/my_md/raw/master/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BABITwarden.assets/image-20240703031105450.png" alt="image-20240703031105450"></p>]]></content>
      
      
      <categories>
          
          <category> 好用的工具 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
